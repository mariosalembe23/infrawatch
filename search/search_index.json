{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api/","title":"API - InfraWatch","text":""},{"location":"api/#autenticacao","title":"Autentica\u00e7\u00e3o","text":"<p><code>POST /api/login</code> - Body: <code>{ \"email\": \"user@test.com\", \"senha\": \"123456\" }</code> - Resposta: <code>{ \"token\": \"...\" }</code></p>"},{"location":"api/#sistemas-monitorados","title":"Sistemas Monitorados","text":"<p><code>GET /api/sistemas</code> - Retorna a lista de sistemas e status.</p>"},{"location":"api/#logs-e-metricas","title":"Logs e M\u00e9tricas","text":"<p><code>GET /api/logs/:sistema</code> - Retorna hist\u00f3rico de m\u00e9tricas de um sistema.</p>"},{"location":"api/#notificacoes","title":"Notifica\u00e7\u00f5es","text":"<p><code>POST /api/notificacoes</code> - Cria nova regra de alerta.</p>"},{"location":"arquitetura/","title":"Arquitetura do Sistema","text":"<p>Esta se\u00e7\u00e3o detalha a arquitetura t\u00e9cnica do InfraWatch, explicando como os componentes interagem para fornecer monitoramento robusto e escal\u00e1vel.</p>"},{"location":"arquitetura/#visao-geral-da-arquitetura","title":"Vis\u00e3o Geral da Arquitetura","text":"<pre><code>graph TB\n    subgraph \"Frontend Layer\"\n        A[React Dashboard] --&gt; B[Next.js Framework]\n        B --&gt; C[WebSocket Client]\n    end\n\n    subgraph \"API Gateway\"\n        D[Load Balancer] --&gt; E[API Gateway]\n        E --&gt; F[Authentication]\n        E --&gt; G[Rate Limiting]\n    end\n\n    subgraph \"Backend Services\"\n        H[Monitoring Engine] --&gt; I[Alert Manager]\n        H --&gt; J[Data Collector]\n        I --&gt; K[Notification Service]\n        J --&gt; L[Metrics Processor]\n    end\n\n    subgraph \"Data Layer\"\n        M[PostgreSQL] --&gt; N[User Data]\n        M --&gt; O[Configuration]\n        P[Time Series DB] --&gt; Q[Metrics]\n        P --&gt; R[Logs]\n        S[Redis Cache] --&gt; T[Sessions]\n        S --&gt; U[Real-time Data]\n    end\n\n    subgraph \"External Integrations\"\n        V[SNMP Agents] --&gt; H\n        W[HTTP Endpoints] --&gt; H\n        X[Webhooks] --&gt; H\n        Y[Third-party APIs] --&gt; H\n    end\n\n    A --&gt; E\n    E --&gt; H\n    H --&gt; M\n    H --&gt; P\n    H --&gt; S\n    K --&gt; Z[Email/SMS/Slack]</code></pre>"},{"location":"arquitetura/#componentes-principais","title":"Componentes Principais","text":""},{"location":"arquitetura/#frontend-reactnextjs","title":"Frontend (React/Next.js)","text":"<p>O frontend \u00e9 uma aplica\u00e7\u00e3o React moderna constru\u00edda com Next.js, oferecendo:</p>"},{"location":"arquitetura/#caracteristicas-tecnicas","title":"Caracter\u00edsticas T\u00e9cnicas","text":"<ul> <li>Framework: Next.js 14 com App Router</li> <li>UI Library: Tailwind CSS + shadcn/ui</li> <li>State Management: Zustand para estado global</li> <li>Real-time: WebSocket para atualiza\u00e7\u00f5es em tempo real</li> <li>Charts: Recharts para visualiza\u00e7\u00f5es</li> </ul>"},{"location":"arquitetura/#estrutura-de-componentes","title":"Estrutura de Componentes","text":"<pre><code>frontend/infrawatch/src/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 dashboard/          # P\u00e1ginas do dashboard\n\u2502   \u251c\u2500\u2500 login/             # Autentica\u00e7\u00e3o\n\u2502   \u2514\u2500\u2500 layout.tsx         # Layout principal\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 ui/                # Componentes base\n\u2502   \u251c\u2500\u2500 charts/            # Gr\u00e1ficos e visualiza\u00e7\u00f5es\n\u2502   \u2514\u2500\u2500 forms/             # Formul\u00e1rios\n\u2514\u2500\u2500 lib/\n    \u251c\u2500\u2500 api.ts             # Cliente da API\n    \u251c\u2500\u2500 websocket.ts       # Conex\u00e3o WebSocket\n    \u2514\u2500\u2500 utils.ts           # Utilit\u00e1rios\n</code></pre>"},{"location":"arquitetura/#fluxo-de-dados","title":"Fluxo de Dados","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant A as API\n    participant W as WebSocket\n\n    U-&gt;&gt;F: Acessa Dashboard\n    F-&gt;&gt;A: Autentica usu\u00e1rio\n    A--&gt;&gt;F: Token JWT\n    F-&gt;&gt;W: Conecta WebSocket\n    W--&gt;&gt;F: Dados em tempo real\n    F-&gt;&gt;U: Exibe dashboard atualizado</code></pre>"},{"location":"arquitetura/#backend-nodejsexpress","title":"Backend (Node.js/Express)","text":"<p>O backend \u00e9 constru\u00eddo com Node.js e Express, fornecendo APIs RESTful e WebSocket.</p>"},{"location":"arquitetura/#arquitetura-em-camadas","title":"Arquitetura em Camadas","text":"<pre><code>api/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 controllers/       # Controladores da API\n\u2502   \u251c\u2500\u2500 services/          # L\u00f3gica de neg\u00f3cio\n\u2502   \u251c\u2500\u2500 models/            # Modelos de dados\n\u2502   \u251c\u2500\u2500 middleware/        # Middlewares\n\u2502   \u251c\u2500\u2500 routes/            # Defini\u00e7\u00e3o de rotas\n\u2502   \u2514\u2500\u2500 utils/             # Utilit\u00e1rios\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 database.js        # Configura\u00e7\u00e3o do BD\n\u2502   \u2514\u2500\u2500 monitoring.js      # Config. monitoramento\n\u2514\u2500\u2500 tests/                 # Testes automatizados\n</code></pre>"},{"location":"arquitetura/#servicos-principais","title":"Servi\u00e7os Principais","text":"Monitoring EngineAlert ManagerData Collector <pre><code>class MonitoringEngine {\n  constructor() {\n    this.activeChecks = new Map();\n    this.scheduler = new CronScheduler();\n  }\n\n  async startMonitoring(service) {\n    const check = new ServiceCheck(service);\n    this.activeChecks.set(service.id, check);\n    this.scheduler.schedule(service.interval, () =&gt; {\n      this.executeCheck(check);\n    });\n  }\n\n  async executeCheck(check) {\n    const result = await check.run();\n    await this.processResult(result);\n  }\n}\n</code></pre> <pre><code>class AlertManager {\n  constructor() {\n    this.rules = new RuleEngine();\n    this.notifier = new NotificationService();\n  }\n\n  async processAlert(metric) {\n    const alerts = await this.rules.evaluate(metric);\n\n    for (const alert of alerts) {\n      await this.notifier.send(alert);\n      await this.logAlert(alert);\n    }\n  }\n}\n</code></pre> <pre><code>class DataCollector {\n  async collect(source, config) {\n    switch (source.type) {\n      case 'http':\n        return await this.httpCheck(config);\n      case 'snmp':\n        return await this.snmpCheck(config);\n      case 'tcp':\n        return await this.tcpCheck(config);\n      default:\n        throw new Error(`Unsupported source: ${source.type}`);\n    }\n  }\n}\n</code></pre>"},{"location":"arquitetura/#banco-de-dados","title":"Banco de Dados","text":""},{"location":"arquitetura/#postgresql-dados-relacionais","title":"PostgreSQL (Dados Relacionais)","text":"<p>Armazena dados estruturados e configura\u00e7\u00f5es:</p> <pre><code>-- Estrutura principal das tabelas\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    role VARCHAR(50) DEFAULT 'user',\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE services (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    type VARCHAR(50) NOT NULL,\n    config JSONB NOT NULL,\n    status VARCHAR(20) DEFAULT 'unknown',\n    last_check TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE alert_rules (\n    id SERIAL PRIMARY KEY,\n    service_id INTEGER REFERENCES services(id),\n    condition JSONB NOT NULL,\n    severity VARCHAR(20) NOT NULL,\n    enabled BOOLEAN DEFAULT true\n);\n</code></pre>"},{"location":"arquitetura/#time-series-database-influxdbtimescaledb","title":"Time Series Database (InfluxDB/TimescaleDB)","text":"<p>Para m\u00e9tricas e dados temporais:</p> <pre><code>-- Extens\u00e3o TimescaleDB no PostgreSQL\nCREATE EXTENSION IF NOT EXISTS timescaledb;\n\n-- Tabela de m\u00e9tricas\nCREATE TABLE metrics (\n    time TIMESTAMPTZ NOT NULL,\n    service_id INTEGER NOT NULL,\n    metric_name VARCHAR(100) NOT NULL,\n    value DOUBLE PRECISION,\n    tags JSONB\n);\n\n-- Converter para hypertable\nSELECT create_hypertable('metrics', 'time');\n\n-- Pol\u00edticas de reten\u00e7\u00e3o\nSELECT add_retention_policy('metrics', INTERVAL '1 year');\n</code></pre>"},{"location":"arquitetura/#redis-cache-e-sessoes","title":"Redis (Cache e Sess\u00f5es)","text":"<pre><code>// Configura\u00e7\u00e3o do Redis\nconst redis = new Redis({\n  host: process.env.REDIS_HOST,\n  port: process.env.REDIS_PORT,\n  retryDelayOnFailover: 100,\n  maxRetriesPerRequest: 3\n});\n\n// Cache de m\u00e9tricas\nawait redis.setex(`metrics:${serviceId}`, 300, JSON.stringify(data));\n\n// Sess\u00f5es de usu\u00e1rio\nawait redis.setex(`session:${token}`, 3600, userId);\n</code></pre>"},{"location":"arquitetura/#fluxos-de-dados","title":"Fluxos de Dados","text":""},{"location":"arquitetura/#fluxo-de-monitoramento","title":"Fluxo de Monitoramento","text":"<pre><code>sequenceDiagram\n    participant S as Scheduler\n    participant M as Monitor\n    participant C as Collector\n    participant D as Database\n    participant A as Alerting\n    participant N as Notifications\n\n    S-&gt;&gt;M: Trigger check\n    M-&gt;&gt;C: Execute collection\n    C-&gt;&gt;C: Perform check (HTTP/SNMP/TCP)\n    C--&gt;&gt;M: Return result\n    M-&gt;&gt;D: Store metrics\n    M-&gt;&gt;A: Evaluate alerts\n    A-&gt;&gt;A: Check rules\n    A-&gt;&gt;N: Send notifications (if needed)\n    N-&gt;&gt;N: Deliver via email/SMS/Slack</code></pre>"},{"location":"arquitetura/#fluxo-de-alertas","title":"Fluxo de Alertas","text":"<pre><code>graph LR\n    A[Metric Collected] --&gt; B{Threshold Exceeded?}\n    B --&gt;|Yes| C[Create Alert]\n    B --&gt;|No| D[Store Metric]\n    C --&gt; E{Escalation Rule?}\n    E --&gt;|Yes| F[Apply Escalation]\n    E --&gt;|No| G[Send Notification]\n    F --&gt; H[Wait for Response]\n    H --&gt; I{Response Received?}\n    I --&gt;|No| J[Escalate Further]\n    I --&gt;|Yes| K[Mark Resolved]\n    J --&gt; G\n    G --&gt; L[Log Alert]</code></pre>"},{"location":"arquitetura/#agentes-de-monitoramento","title":"Agentes de Monitoramento","text":""},{"location":"arquitetura/#arquitetura-dos-agentes","title":"Arquitetura dos Agentes","text":"<pre><code># Estrutura do agente Python\nclass MonitoringAgent:\n    def __init__(self, config):\n        self.config = config\n        self.api_client = APIClient(config.api_url)\n        self.collectors = self._init_collectors()\n\n    def _init_collectors(self):\n        return {\n            'system': SystemCollector(),\n            'network': NetworkCollector(),\n            'application': ApplicationCollector()\n        }\n\n    async def run_monitoring_cycle(self):\n        for collector_name, collector in self.collectors.items():\n            try:\n                metrics = await collector.collect()\n                await self.api_client.send_metrics(metrics)\n            except Exception as e:\n                logger.error(f\"Error in {collector_name}: {e}\")\n</code></pre>"},{"location":"arquitetura/#tipos-de-coletores","title":"Tipos de Coletores","text":"System CollectorNetwork CollectorApplication Collector <pre><code>class SystemCollector:\n    def collect(self):\n        return {\n            'cpu_usage': psutil.cpu_percent(),\n            'memory_usage': psutil.virtual_memory().percent,\n            'disk_usage': psutil.disk_usage('/').percent,\n            'load_average': os.getloadavg()\n        }\n</code></pre> <pre><code>class NetworkCollector:\n    def collect(self):\n        stats = psutil.net_io_counters()\n        return {\n            'bytes_sent': stats.bytes_sent,\n            'bytes_recv': stats.bytes_recv,\n            'packets_sent': stats.packets_sent,\n            'packets_recv': stats.packets_recv\n        }\n</code></pre> <pre><code>class ApplicationCollector:\n    def collect(self):\n        processes = []\n        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):\n            if proc.info['name'] in self.monitored_processes:\n                processes.append(proc.info)\n        return {'processes': processes}\n</code></pre>"},{"location":"arquitetura/#escalabilidade-e-performance","title":"Escalabilidade e Performance","text":""},{"location":"arquitetura/#estrategias-de-escalabilidade","title":"Estrat\u00e9gias de Escalabilidade","text":""},{"location":"arquitetura/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code># Kubernetes deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: infrawatch-backend\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: infrawatch-backend\n  template:\n    spec:\n      containers:\n      - name: backend\n        image: infrawatch/backend:latest\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n</code></pre>"},{"location":"arquitetura/#load-balancing","title":"Load Balancing","text":"<pre><code>upstream infrawatch_backend {\n    least_conn;\n    server backend1:3001 weight=1 max_fails=3 fail_timeout=30s;\n    server backend2:3001 weight=1 max_fails=3 fail_timeout=30s;\n    server backend3:3001 weight=1 max_fails=3 fail_timeout=30s;\n}\n\nserver {\n    location /api {\n        proxy_pass http://infrawatch_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre>"},{"location":"arquitetura/#otimizacoes-de-performance","title":"Otimiza\u00e7\u00f5es de Performance","text":""},{"location":"arquitetura/#database-indexing","title":"Database Indexing","text":"<pre><code>-- \u00cdndices para queries frequentes\nCREATE INDEX idx_metrics_service_time ON metrics(service_id, time DESC);\nCREATE INDEX idx_services_status ON services(status);\nCREATE INDEX idx_alerts_created_at ON alerts(created_at DESC);\n\n-- Particionamento por tempo\nSELECT add_dimension('metrics', 'service_id', number_partitions =&gt; 4);\n</code></pre>"},{"location":"arquitetura/#caching-strategy","title":"Caching Strategy","text":"<pre><code>// Cache em m\u00faltiplas camadas\nclass CacheManager {\n  constructor() {\n    this.l1Cache = new Map(); // Memory cache\n    this.l2Cache = redis;     // Redis cache\n  }\n\n  async get(key) {\n    // L1 Cache\n    if (this.l1Cache.has(key)) {\n      return this.l1Cache.get(key);\n    }\n\n    // L2 Cache\n    const value = await this.l2Cache.get(key);\n    if (value) {\n      this.l1Cache.set(key, value);\n      return value;\n    }\n\n    return null;\n  }\n}\n</code></pre>"},{"location":"arquitetura/#seguranca","title":"Seguran\u00e7a","text":""},{"location":"arquitetura/#autenticacao-e-autorizacao","title":"Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o","text":"<pre><code>// JWT Authentication\nconst jwt = require('jsonwebtoken');\n\nclass AuthService {\n  generateToken(user) {\n    return jwt.sign(\n      { userId: user.id, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n  }\n\n  verifyToken(token) {\n    return jwt.verify(token, process.env.JWT_SECRET);\n  }\n}\n\n// RBAC Middleware\nconst authorize = (roles) =&gt; {\n  return (req, res, next) =&gt; {\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Forbidden' });\n    }\n    next();\n  };\n};\n</code></pre>"},{"location":"arquitetura/#comunicacao-segura","title":"Comunica\u00e7\u00e3o Segura","text":"<pre><code>// HTTPS Configuration\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('private-key.pem'),\n  cert: fs.readFileSync('certificate.pem')\n};\n\nhttps.createServer(options, app).listen(443);\n\n// API Rate Limiting\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP'\n});\n</code></pre>"},{"location":"arquitetura/#monitoramento-do-sistema","title":"Monitoramento do Sistema","text":""},{"location":"arquitetura/#health-checks","title":"Health Checks","text":"<pre><code>// Sistema de health checks\napp.get('/health', async (req, res) =&gt; {\n  const health = {\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    services: {\n      database: await checkDatabase(),\n      redis: await checkRedis(),\n      external_apis: await checkExternalAPIs()\n    }\n  };\n\n  const isHealthy = Object.values(health.services)\n    .every(service =&gt; service.status === 'ok');\n\n  res.status(isHealthy ? 200 : 503).json(health);\n});\n</code></pre>"},{"location":"arquitetura/#metricas-internas","title":"M\u00e9tricas Internas","text":"<pre><code>// Prometheus metrics\nconst prometheus = require('prom-client');\n\nconst httpRequestDuration = new prometheus.Histogram({\n  name: 'http_request_duration_seconds',\n  help: 'Duration of HTTP requests in seconds',\n  labelNames: ['method', 'route', 'status']\n});\n\nconst activeConnections = new prometheus.Gauge({\n  name: 'websocket_connections_active',\n  help: 'Number of active WebSocket connections'\n});\n</code></pre> <p>Esta arquitetura garante que o InfraWatch seja escal\u00e1vel, seguro e perform\u00e1tico, capaz de monitorar infraestruturas de qualquer tamanho com alta disponibilidade e confiabilidade.</p>"},{"location":"contribuicao/","title":"Contribui\u00e7\u00e3o","text":""},{"location":"contribuicao/#como-contribuir","title":"Como contribuir","text":"<ol> <li>Fa\u00e7a um fork do reposit\u00f3rio.</li> <li>Crie uma branch:    <pre><code>git checkout -b minha-feature\n</code></pre></li> <li>Fa\u00e7a o commit.</li> <li>Abra um Pull Request.</li> </ol>"},{"location":"contribuicao/#padroes","title":"Padr\u00f5es","text":"<ul> <li>C\u00f3digo limpo e comentado.</li> <li>Seguir ESLint/Prettier no frontend.</li> <li>Documentar fun\u00e7\u00f5es principais no backend.</li> </ul>"},{"location":"contribuicao/#issues","title":"Issues","text":"<ul> <li>Relatar bugs e sugerir melhorias via GitHub Issues.</li> </ul>"},{"location":"faq/","title":"FAQ - Perguntas Frequentes","text":""},{"location":"faq/#1-como-instalar-o-projeto","title":"1. Como instalar o projeto?","text":"<p>Veja Instala\u00e7\u00e3o.</p>"},{"location":"faq/#2-o-projeto-funciona-em-windowslinuxmac","title":"2. O projeto funciona em Windows/Linux/Mac?","text":"<p>[Responder conforme aplic\u00e1vel].</p>"},{"location":"faq/#3-posso-usar-este-projeto-em-producao","title":"3. Posso usar este projeto em produ\u00e7\u00e3o?","text":"<p>[Explicar condi\u00e7\u00f5es de uso].</p>"},{"location":"instalacao/","title":"Guia de Instala\u00e7\u00e3o","text":"<p>Este guia fornece instru\u00e7\u00f5es detalhadas para instalar e configurar o InfraWatch em diferentes ambientes.</p>"},{"location":"instalacao/#pre-requisitos","title":"Pr\u00e9-requisitos","text":""},{"location":"instalacao/#sistema-operacional","title":"Sistema Operacional","text":"<ul> <li>Linux: Ubuntu 20.04+ / CentOS 8+ / RHEL 8+</li> <li>Windows: Windows Server 2019+</li> <li>macOS: macOS 11+ (desenvolvimento)</li> </ul>"},{"location":"instalacao/#software-necessario","title":"Software Necess\u00e1rio","text":"BackendFrontendAgentes <ul> <li>Node.js: 18.x ou superior</li> <li>npm/yarn: Gerenciador de pacotes</li> <li>PostgreSQL: 13+ (dados relacionais)</li> <li>Redis: 6+ (cache e sess\u00f5es)</li> </ul> <ul> <li>Node.js: 18.x ou superior</li> <li>React: 18+ (inclu\u00eddo no projeto)</li> <li>Navegador: Chrome 90+, Firefox 88+, Safari 14+</li> </ul> <ul> <li>Python: 3.8+ (agentes de monitoramento)</li> <li>pip: Gerenciador de pacotes Python</li> </ul>"},{"location":"instalacao/#hardware-minimo","title":"Hardware M\u00ednimo","text":"Componente Desenvolvimento Produ\u00e7\u00e3o CPU 2 cores 4+ cores RAM 4 GB 8+ GB Disco 20 GB 100+ GB SSD Rede 100 Mbps 1 Gbps"},{"location":"instalacao/#instalacao-rapida","title":"Instala\u00e7\u00e3o R\u00e1pida","text":""},{"location":"instalacao/#1-clone-o-repositorio","title":"1. Clone o Reposit\u00f3rio","text":"<pre><code>git clone https://github.com/mariosalembe23/infrawatch.git\ncd infrawatch\n</code></pre>"},{"location":"instalacao/#2-configuracao-do-backend","title":"2. Configura\u00e7\u00e3o do Backend","text":"<pre><code># Navegar para o diret\u00f3rio da API\ncd api\n\n# Instalar depend\u00eancias\nnpm install\n\n# Configurar vari\u00e1veis de ambiente\ncp .env.example .env\n</code></pre>"},{"location":"instalacao/#3-configuracao-do-banco-de-dados","title":"3. Configura\u00e7\u00e3o do Banco de Dados","text":"<pre><code># Criar banco de dados PostgreSQL\ncreatedb infrawatch\n\n# Executar migra\u00e7\u00f5es\nnpm run migrate\n\n# Popular dados iniciais (opcional)\nnpm run seed\n</code></pre>"},{"location":"instalacao/#4-configuracao-do-frontend","title":"4. Configura\u00e7\u00e3o do Frontend","text":"<pre><code># Navegar para o frontend\ncd ../frontend/infrawatch\n\n# Instalar depend\u00eancias\nnpm install\n\n# Configurar ambiente\ncp .env.example .env.local\n</code></pre>"},{"location":"instalacao/#5-iniciar-os-servicos","title":"5. Iniciar os Servi\u00e7os","text":"DesenvolvimentoProdu\u00e7\u00e3o <pre><code># Terminal 1 - Backend\ncd api\nnpm run dev\n\n# Terminal 2 - Frontend\ncd frontend/infrawatch\nnpm run dev\n</code></pre> <pre><code># Build do frontend\ncd frontend/infrawatch\nnpm run build\n\n# Iniciar backend\ncd ../../api\nnpm run start\n</code></pre>"},{"location":"instalacao/#configuracao-detalhada","title":"Configura\u00e7\u00e3o Detalhada","text":""},{"location":"instalacao/#variaveis-de-ambiente-backend","title":"Vari\u00e1veis de Ambiente - Backend","text":"api/.env<pre><code># Banco de Dados\nDATABASE_URL=postgresql://user:password@localhost:5432/infrawatch\nREDIS_URL=redis://localhost:6379\n\n# Aplica\u00e7\u00e3o\nNODE_ENV=production\nPORT=3001\nJWT_SECRET=your-super-secret-key\n\n# Notifica\u00e7\u00f5es\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-app-password\n\n# Monitoramento\nMONITORING_INTERVAL=30000\nMAX_CONCURRENT_CHECKS=100\n</code></pre>"},{"location":"instalacao/#variaveis-de-ambiente-frontend","title":"Vari\u00e1veis de Ambiente - Frontend","text":"frontend/infrawatch/.env.local<pre><code>NEXT_PUBLIC_API_URL=http://localhost:3001\nNEXT_PUBLIC_WS_URL=ws://localhost:3001\nNEXT_PUBLIC_APP_NAME=InfraWatch\n</code></pre>"},{"location":"instalacao/#configuracao-do-postgresql","title":"Configura\u00e7\u00e3o do PostgreSQL","text":"<pre><code>-- Criar usu\u00e1rio e banco\nCREATE USER infrawatch WITH PASSWORD 'secure_password';\nCREATE DATABASE infrawatch OWNER infrawatch;\nGRANT ALL PRIVILEGES ON DATABASE infrawatch TO infrawatch;\n\n-- Configura\u00e7\u00f5es de performance\nALTER SYSTEM SET shared_preload_libraries = 'pg_stat_statements';\nALTER SYSTEM SET max_connections = 200;\nALTER SYSTEM SET shared_buffers = '256MB';\n</code></pre>"},{"location":"instalacao/#instalacao-com-docker","title":"Instala\u00e7\u00e3o com Docker","text":""},{"location":"instalacao/#docker-compose","title":"Docker Compose","text":"docker-compose.yml<pre><code>version: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: infrawatch\n      POSTGRES_USER: infrawatch\n      POSTGRES_PASSWORD: secure_password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n\n  backend:\n    build: ./api\n    environment:\n      DATABASE_URL: postgresql://infrawatch:secure_password@postgres:5432/infrawatch\n      REDIS_URL: redis://redis:6379\n    ports:\n      - \"3001:3001\"\n    depends_on:\n      - postgres\n      - redis\n\n  frontend:\n    build: ./frontend/infrawatch\n    environment:\n      NEXT_PUBLIC_API_URL: http://localhost:3001\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - backend\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"instalacao/#executar-com-docker","title":"Executar com Docker","text":"<pre><code># Iniciar todos os servi\u00e7os\ndocker-compose up -d\n\n# Verificar status\ndocker-compose ps\n\n# Ver logs\ndocker-compose logs -f\n</code></pre>"},{"location":"instalacao/#configuracao-dos-agentes","title":"Configura\u00e7\u00e3o dos Agentes","text":""},{"location":"instalacao/#instalacao-do-agente-python","title":"Instala\u00e7\u00e3o do Agente Python","text":"<pre><code># Navegar para o diret\u00f3rio dos agentes\ncd agents/server\n\n# Instalar depend\u00eancias\npip install -r requirements.txt\n\n# Configurar agente\ncp config.example.py config.py\n</code></pre>"},{"location":"instalacao/#configuracao-do-agente","title":"Configura\u00e7\u00e3o do Agente","text":"agents/server/config.py<pre><code># Configura\u00e7\u00f5es do servidor\nAPI_URL = \"http://localhost:3001\"\nAPI_KEY = \"your-api-key\"\n\n# Configura\u00e7\u00f5es de monitoramento\nCHECK_INTERVAL = 30  # segundos\nTIMEOUT = 10  # segundos\n\n# Servi\u00e7os a monitorar\nSERVICES = [\n    {\n        \"name\": \"Web Server\",\n        \"type\": \"http\",\n        \"url\": \"https://example.com\",\n        \"expected_status\": 200\n    },\n    {\n        \"name\": \"Database\",\n        \"type\": \"tcp\",\n        \"host\": \"localhost\",\n        \"port\": 5432\n    }\n]\n</code></pre>"},{"location":"instalacao/#executar-agente","title":"Executar Agente","text":"<pre><code># Executar manualmente\npython monitor.py\n\n# Instalar como servi\u00e7o (Linux)\nsudo python installer.py --install\n\n# Verificar status do servi\u00e7o\nsudo systemctl status infrawatch-agent\n</code></pre>"},{"location":"instalacao/#configuracao-de-seguranca","title":"Configura\u00e7\u00e3o de Seguran\u00e7a","text":""},{"location":"instalacao/#ssltls","title":"SSL/TLS","text":"/etc/nginx/sites-available/infrawatch<pre><code>server {\n    listen 443 ssl http2;\n    server_name infrawatch.yourdomain.com;\n\n    ssl_certificate /path/to/certificate.crt;\n    ssl_certificate_key /path/to/private.key;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    location /api {\n        proxy_pass http://localhost:3001;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre>"},{"location":"instalacao/#firewall","title":"Firewall","text":"<pre><code># Ubuntu/Debian\nsudo ufw allow 22/tcp\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n\n# CentOS/RHEL\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n</code></pre>"},{"location":"instalacao/#verificacao-da-instalacao","title":"Verifica\u00e7\u00e3o da Instala\u00e7\u00e3o","text":""},{"location":"instalacao/#testes-de-conectividade","title":"Testes de Conectividade","text":"<pre><code># Verificar backend\ncurl http://localhost:3001/health\n\n# Verificar frontend\ncurl http://localhost:3000\n\n# Verificar banco de dados\npsql -h localhost -U infrawatch -d infrawatch -c \"SELECT version();\"\n</code></pre>"},{"location":"instalacao/#dashboard-de-status","title":"Dashboard de Status","text":"<p>Acesse <code>http://localhost:3000</code> e verifique:</p> <ul> <li>Login funcional</li> <li>Dashboard carregando</li> <li>Dados de monitoramento aparecendo</li> <li>Notifica\u00e7\u00f5es funcionando</li> </ul>"},{"location":"instalacao/#solucao-de-problemas","title":"Solu\u00e7\u00e3o de Problemas","text":""},{"location":"instalacao/#problemas-comuns","title":"Problemas Comuns","text":"<p>Erro de Conex\u00e3o com Banco</p> <pre><code># Verificar se PostgreSQL est\u00e1 rodando\nsudo systemctl status postgresql\n\n# Verificar conectividade\npg_isready -h localhost -p 5432\n</code></pre> <p>Frontend n\u00e3o carrega</p> <pre><code># Verificar se o build foi feito\ncd frontend/infrawatch\nnpm run build\n\n# Verificar vari\u00e1veis de ambiente\ncat .env.local\n</code></pre> <p>Agente n\u00e3o conecta</p> <pre><code># Verificar configura\u00e7\u00e3o\npython -c \"import config; print(config.API_URL)\"\n\n# Testar conectividade\ncurl -X POST http://localhost:3001/api/agents/heartbeat\n</code></pre>"},{"location":"instalacao/#logs-e-debugging","title":"Logs e Debugging","text":"<pre><code># Logs do backend\ntail -f api/logs/app.log\n\n# Logs do frontend (desenvolvimento)\nnpm run dev\n\n# Logs do sistema (Linux)\nsudo journalctl -u infrawatch-agent -f\n</code></pre>"},{"location":"instalacao/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Ap\u00f3s a instala\u00e7\u00e3o bem-sucedida:</p> <ol> <li>Leia a Arquitetura do sistema</li> <li>Configure usu\u00e1rios e permiss\u00f5es</li> <li>Adicione seus primeiros servi\u00e7os para monitoramento</li> <li>Personalize dashboards e alertas</li> <li>Configure notifica\u00e7\u00f5es</li> </ol> <p>Instala\u00e7\u00e3o Conclu\u00edda!</p> <p>Parab\u00e9ns! O InfraWatch est\u00e1 instalado e pronto para uso. Para suporte adicional, consulte nossa FAQ ou entre em contato conosco.</p>"},{"location":"introducao/","title":"InfraWatch","text":"Plataforma de Monitoramento de Infraestrutura Corporativa <p>Visibilidade completa, controle total da sua infraestrutura tecnol\u00f3gica</p>"},{"location":"introducao/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O InfraWatch \u00e9 uma solu\u00e7\u00e3o moderna de monitoramento de infraestruturas corporativas que centraliza a observa\u00e7\u00e3o de m\u00faltiplos servi\u00e7os e sistemas organizacionais. Oferece visibilidade em tempo real sobre redes, servidores, aplica\u00e7\u00f5es e endpoints, garantindo alta disponibilidade dos servi\u00e7os cr\u00edticos.</p> <p>Objetivo Principal</p> <p>Criar uma plataforma unificada que permite \u00e0s organiza\u00e7\u00f5es monitorar proativamente sua infraestrutura tecnol\u00f3gica, antecipando falhas e otimizando tempos de resposta.</p>"},{"location":"introducao/#funcionalidades-principais","title":"Funcionalidades Principais","text":""},{"location":"introducao/#monitoramento-multifonte","title":"Monitoramento Multifonte","text":"<ul> <li>Conectividade diversificada: API, SNMP, ping, webhook</li> <li>Detec\u00e7\u00e3o autom\u00e1tica de mudan\u00e7as de estado (up/down)</li> <li>Coleta em tempo real com intervalos personaliz\u00e1veis</li> </ul>"},{"location":"introducao/#dashboards-inteligentes","title":"Dashboards Inteligentes","text":"<ul> <li>Interface responsiva e intuitiva</li> <li>Indicadores visuais em tempo real</li> <li>M\u00e9tricas de uptime e disponibilidade</li> <li>Relat\u00f3rios de SLA automatizados</li> </ul>"},{"location":"introducao/#sistema-de-alertas","title":"Sistema de Alertas","text":"<ul> <li>Notifica\u00e7\u00f5es multicanal (e-mail, SMS, push)</li> <li>N\u00edveis de criticidade personaliz\u00e1veis</li> <li>Regras de escalonamento inteligentes</li> <li>Integra\u00e7\u00e3o com Slack, Teams, WhatsApp</li> </ul>"},{"location":"introducao/#analise-historica","title":"An\u00e1lise Hist\u00f3rica","text":"<ul> <li>Armazenamento de logs e m\u00e9tricas</li> <li>Relat\u00f3rios de tend\u00eancias</li> <li>An\u00e1lise de incidentes</li> <li>Proje\u00e7\u00f5es baseadas em dados</li> </ul>"},{"location":"introducao/#arquitetura-do-sistema","title":"Arquitetura do Sistema","text":"<pre><code>graph TB\n    A[Frontend React] --&gt; B[API Gateway]\n    B --&gt; C[Backend Services]\n    C --&gt; D[Database PostgreSQL]\n    C --&gt; E[Time Series DB]\n    C --&gt; F[Notification Service]\n\n    G[Agents] --&gt; H[Monitoring Engine]\n    H --&gt; C\n\n    I[External Systems] --&gt; J[Webhooks]\n    J --&gt; C\n\n    F --&gt; K[Email/SMS/Push]\n    F --&gt; L[Slack/Teams]</code></pre>"},{"location":"introducao/#casos-de-uso","title":"Casos de Uso","text":"Detec\u00e7\u00e3o de Falha Cr\u00edticaMonitoramento de SLA <p>Cen\u00e1rio: Servidor ERP-PROD indispon\u00edvel</p> <ol> <li>Sistema detecta automaticamente</li> <li>Dashboard exibe alerta vermelho</li> <li>Notifica\u00e7\u00e3o enviada ao respons\u00e1vel</li> <li>Log detalhado registrado</li> </ol> <p>Cen\u00e1rio: Acompanhamento de Kiosks Self-Service</p> <ul> <li>Tracking de uptime (99.3% atual)</li> <li>Registro de 3 falhas no per\u00edodo</li> <li>Relat\u00f3rio de impacto no SLA</li> <li>Proje\u00e7\u00f5es baseadas em hist\u00f3rico</li> </ul>"},{"location":"introducao/#beneficios-organizacionais","title":"Benef\u00edcios Organizacionais","text":""},{"location":"introducao/#operacionais","title":"Operacionais","text":"<ul> <li>Proatividade: Detec\u00e7\u00e3o precoce de problemas</li> <li>Efici\u00eancia: Redu\u00e7\u00e3o do tempo de resolu\u00e7\u00e3o</li> <li>Centraliza\u00e7\u00e3o: Vis\u00e3o unificada da infraestrutura</li> <li>Automatiza\u00e7\u00e3o: Menos verifica\u00e7\u00f5es manuais</li> </ul>"},{"location":"introducao/#estrategicos","title":"Estrat\u00e9gicos","text":"<ul> <li>Compliance: Monitoramento autom\u00e1tico de SLA</li> <li>Planejamento: Decis\u00f5es baseadas em dados</li> <li>Otimiza\u00e7\u00e3o: Identifica\u00e7\u00e3o de melhorias</li> <li>Transpar\u00eancia: Visibilidade para gest\u00e3o</li> </ul>"},{"location":"introducao/#integracoes-suportadas","title":"Integra\u00e7\u00f5es Suportadas","text":"Protocolo Descri\u00e7\u00e3o Uso REST/GraphQL APIs modernas Servi\u00e7os web SNMP Protocolo de rede Equipamentos tradicionais ICMP Ping Conectividade b\u00e1sica Verifica\u00e7\u00e3o de rede Webhooks Integra\u00e7\u00e3o bidirecional Sistemas externos"},{"location":"introducao/#ferramentas-de-gestao","title":"Ferramentas de Gest\u00e3o","text":"<ul> <li>GLPI: Gest\u00e3o de ativos</li> <li>DocuWare: Gest\u00e3o documental</li> <li>Sistemas ERP: Processos de neg\u00f3cio</li> <li>Plataformas de Chat: Slack, Teams</li> </ul>"},{"location":"introducao/#comecar-agora","title":"Come\u00e7ar Agora","text":"<p>Pr\u00f3ximos Passos</p> <ol> <li>Leia o Guia de Instala\u00e7\u00e3o</li> <li>Entenda a Arquitetura</li> <li>Consulte o Manual de Uso</li> <li>Explore a API</li> </ol>"},{"location":"introducao/#suporte","title":"Suporte","text":"<p>Precisa de ajuda? Consulte nossa se\u00e7\u00e3o de Suporte ou entre em contato:</p> <ul> <li>Email: suporte@rcs-angola.com</li> <li>Chat: Dispon\u00edvel no dashboard</li> <li>WhatsApp: +244 XXX XXX XXX</li> </ul> <p>InfraWatch - Desenvolvido pela RCS Angola</p> <p>Transformando a gest\u00e3o de infraestrutura atrav\u00e9s da inova\u00e7\u00e3o</p>"},{"location":"roadmap/","title":"Roadmap do Projeto","text":""},{"location":"roadmap/#versao-atual-v10","title":"Vers\u00e3o Atual (v1.0)","text":"<ul> <li>Dashboard b\u00e1sico</li> <li>Monitoramento via ping/API</li> <li>Notifica\u00e7\u00f5es por e-mail</li> </ul>"},{"location":"roadmap/#futuras-melhorias","title":"Futuras Melhorias","text":"<ul> <li> Integra\u00e7\u00e3o com WhatsApp/Telegram</li> <li> Relat\u00f3rios de SLA avan\u00e7ados</li> <li> Autentica\u00e7\u00e3o multifator</li> <li> Alta disponibilidade</li> </ul>"},{"location":"roadmap/#historico","title":"Hist\u00f3rico","text":"<ul> <li>v1.0 \u2013 Primeira vers\u00e3o funcional</li> </ul>"},{"location":"uso/","title":"Uso do InfraWatch","text":""},{"location":"uso/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"uso/#exemplo-1","title":"Exemplo 1","text":"<p>Servidor ERP-PROD est\u00e1 em status down h\u00e1 3 minutos. - Dashboard exibe alerta em vermelho. - Sistema envia e-mail ao respons\u00e1vel.</p>"},{"location":"uso/#exemplo-2","title":"Exemplo 2","text":"<p>Usu\u00e1rio acessa SLA do servi\u00e7o Kiosks Self-Service: - 99.3% de uptime no m\u00eas. - 3 falhas registradas.</p>"},{"location":"uso/#como-usar","title":"Como usar","text":"<ol> <li>Acesse <code>http://localhost:3000</code>.</li> <li>Autentique-se com seu usu\u00e1rio.</li> <li>Navegue pelos dashboards.</li> <li>Configure alertas no menu Notifica\u00e7\u00f5es.</li> </ol>"}]}